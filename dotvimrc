call plug#begin('~/.vim/plugged')

Plug 'alvan/vim-closetag'
Plug 'cschlueter/vim-wombat'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'danro/rename.vim'
Plug 'easymotion/vim-easymotion'
Plug 'jiangmiao/auto-pairs'
Plug 'kassio/neoterm'
Plug 'mattn/gist-vim'
Plug 'mattn/webapi-vim'
Plug 'mileszs/ack.vim'
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/syntastic'
Plug 'tpope/vim-fugitive'
Plug 'vim-scripts/simplefold'
Plug 'sheerun/vim-polyglot'
Plug 'tpope/vim-surround'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
" Snippets
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
" Ruby
Plug 'tpope/vim-rails'
Plug 'ngmy/vim-rubocop'
" Python
Plug 'pappasam/coc-jedi', { 'do': 'yarn install --frozen-lockfile && yarn build' }

call plug#end()

" Basic setup
filetype plugin indent on
colorscheme wombat256
set autoindent
set colorcolumn=80
set complete=.,t
set cursorcolumn
set cursorline
set expandtab
set foldlevel=1
set foldmethod=indent
set hidden
set history=1000
set hlsearch
set ignorecase
set incsearch
set iskeyword+=_,@-@,?,!
set number
set preserveindent
set relativenumber
set ruler
set scrolloff=3
set shiftwidth=2
set showmatch
set smartcase
set smartindent
set smarttab
set softtabstop=2
set title
set visualbell
set wildignore+=*.o,*.obj,.git,*/spec/cassettes/**,*/vendor/**,*/bin_stubs/**,*/tmp/**,*/log/**,*/node_modules/**,*/tools/**
set wildmenu
set wildmode=list:longest
set wrap
syntax on

" Set <Leader> to comma
let mapleader = ','

" Change normal mode leader (avoid use shift)
nnoremap ; :
nnoremap : ;

" alias
ab pry require 'pry';binding.pry

" A few useful shortcuts
command! Rehash source ~/.vimrc
command! Color echo g:colors_name
command! Helptags helptags ~/.vim/doc
command! -range=% RubyNewHashNotation silent execute <line1>.','.<line2>.'s/:\(\w\+\)\s*=>\s*/\1: /g'

" Save when lost focus
au FocusLost * :wa

" remove all trailing whitespace when :w
autocmd BufWritePre * :%s/\s\+$//e

" Make the arrow keys switch between splits
map <up> <C-w>k
map <down> <C-w>j
map <right> <C-w>l
map <left> <C-w>h

"toggle unfold
nnoremap <space> za
vnoremap <space> za

" Navigation between buffers
map <leader>l ;e#<cr>

" Added non ruby files in ruby syntax
au BufRead, BufNewFile {Procfile,Capfile,Gemfile,Rakefile,Thorfile,config.ru,.caprc,.irbrc,irb_tempfile*} set ft=ruby
au BufRead, BufNewFile *.php

" Copy from clipboard
map <leader>pc ;r ! pbpaste<CR>

" Make transparency works
hi! Normal ctermbg=NONE guibg=NONE
hi! NonText ctermbg=NONE guibg=NONE

" NERDCommenter
let NERDSpaceDelims = 1
let NERDDefaultNesting = 0

" Gist
let g:gist_clip_command = 'pbcopy'
let g:gist_open_browser_after_post = 1
let g:gist_post_private = 1

" Syntastic
let g:syntastic_enable_signs=1
let g:syntastic_auto_loc_list=1

" Redraw panel when terminal mess up
nnoremap <leader>rr ;redraw!<cr>

" UltiSnips
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" coc
set nobackup
set nowritebackup
set encoding=utf-8
set hidden
set cmdheight=2
set updatetime=300
set shortmess+=c
" To make <cr> select the first completion item and confirm the completion when no item has been selected
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm() : "\<C-g>u\<CR>"
" to make coc.nvim format your code on <cr>
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm() : "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
" use <tab> for trigger completion and navigate to the next complete item
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction
inoremap <silent><expr> <Tab>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()
" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')
" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)
" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}
