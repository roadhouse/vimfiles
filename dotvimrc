" Basic setup
set nocompatible
set ruler
set showmatch
set autoindent
set preserveindent
set relativenumber
set cursorline
" set wrap
set complete=.,t
imap <Tab> <C-N>
syntax on
set history=1000
set wildmenu
set wildmode=list:longest
set hidden
set scrolloff=3
set visualbell
set iskeyword-=_,$,@,%,#
set foldmethod=indent
set foldlevel=1

" pathogen setup
call pathogen#runtime_append_all_bundles() 
call pathogen#helptags()

" Color scheme
colorscheme jellybeans

" Setup backup location and enable
set backup
set backupdir=/tmp
set directory=/tmp

" Set <Leader> to comma
let mapleader = ','

" Filetype patterns
filetype on
filetype plugin on
filetype indent on

" Tab/indentation configuration
set softtabstop=2
set shiftwidth=2
set expandtab
set smarttab
set ai " autoindent
set si " smartindent

" Make the status line more informative
" let g:syntastic_enable_signs=1
let g:syntastic_auto_loc_list=1
set laststatus=2
set statusline=%<buf:[%n]\ %f\ %h%m%r " buffer, filename, flags
set statusline+=\ \ [
set statusline+=%{strlen(&ft)?&ft:'none'} " filetype
set statusline+=]\ "
set statusline+=%=
set statusline+=\ [%3.(%c%)\ %-7.(%l/%L%)]\ %P
set statusline+=%*
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

" Search pattern highlight/incremental
set ignorecase
set smartcase
set showmatch
set hlsearch
set incsearch

" A few useful shortcuts
command! Rehash source ~/.vimrc
command! Color echo g:colors_name
command! Helptags helptags ~/.vim/doc

" Save when lost focus
au FocusLost * :wa

" Make the arrow keys switch between splits
map <up> <C-w>k
map <down> <C-w>j
map <right> <C-w>l
map <left> <C-w>h

" Navigation between buffers
:nnoremap <A-D-right> :bnext<CR>
:nnoremap <A-D-left> :bprevious<CR>

" Duplicate the selected line
vmap D y'>p

" Added non ruby files in ruby syntax
au BufRead,BufNewFile {Capfile,Gemfile,Rakefile,Thorfile,config.ru,.caprc,.pryrc,.irbrc,irb_tempfile*} set ft=ruby

" Copy from clipboard
map <leader>pc :r ! pbpaste<CR>

" Indent entire file
map <leader>if ggVG=

" FuzzyFinder
let g:fuf_modesDisable = ['mrucmd', 'bookmarkdir', 'givenfile', 'givendir', 'givencmd', 'quickfix', 'jumplist', 'line']
let g:fuf_fuzzyRefining = 1
let g:fuzzy_ignore = '*.log;*.swp;*~;temp/*;log/*;tmp/*;coverage/*;README;*.jpg;*.png;*.gem'
let g:fuf_coveragefile_exclude = '\v\~$|\.(o|exe|dll|bak|orig|swp|png|gif|jpg|log)$|(^|[/\\])\.(coverage|hg|git|bzr)($|[/\\])'
let g:fuzzy_enumerating_limit = 15
let g:fuzzy_matching_limit = 40
let g:fuzzy_ceiling = 300000
map <leader>bb :FufBuffer<CR>
map <leader>ff :FufFile<CR>
map <leader>t :FufCoverageFile<CR>

" NERDCommenter
let NERDSpaceDelims = 1

" taglist
let Tlist_Display_Tag_Scope = 0
let Tlist_File_Fold_Auto_Close = 1
let Tlist_Show_Menu = 1
map <Leader>tt :TlistToggle<CR>
map <Leader>th :TlistHighlightTag<CR>
map <Leader>tp :TlistShowPrototype<CR>
map <Leader>tu :TlistUpdate<CR>

" Gist
let g:gist_clip_command = 'pbcopy'
let g:gist_open_browser_after_post = 1

